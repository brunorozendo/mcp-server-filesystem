plugins {
    id 'java'
    id 'application'
    // Shadow plugin creates a fat/uber JAR with all dependencies included
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'groovy' // For Spock tests
    id 'jacoco' // For code coverage
}

group = 'com.brunorozendo.mcp'
version = '0.7.1' // Incremented version for dependency fix

repositories {
    mavenCentral()
}

dependencies {
    // The core MCP SDK for Java
    implementation 'io.modelcontextprotocol.sdk:mcp:0.10.0'

    // A library for generating text diffs, using the correct Maven coordinates
    implementation 'io.github.java-diff-utils:java-diff-utils:4.12'

    // Jackson for object mapping, provided by the MCP SDK but good to be aware of
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'



    // Spock and Groovy for testing
    testImplementation platform('org.spockframework:spock-bom:2.4-M6-groovy-4.0')
    testImplementation 'org.spockframework:spock-core'

    // Spock reports
    testImplementation "com.athaydes:spock-reports:2.5.1-groovy-4.0"

    // Spring Boot Testing

}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

application {
    mainClass = 'com.brunorozendo.mcp.filesystem.FilesystemServer'
}

// Configure the shadowJar task to be the default jar
shadowJar {
    archiveBaseName = 'filesystem-mcp-server'
    archiveClassifier = 'all'
    archiveVersion = '' // Omit version from the final jar name
}

// Ensure the default jar task builds the fat jar
jar {
    enabled = false
}
tasks.build.dependsOn(shadowJar)


test{
    useJUnitPlatform()
    testLogging {
        //events "FAILED","PASSED","SKIPPED","STANDARD_ERROR","STANDARD_OUT","STARTED"
        events "FAILED","PASSED","SKIPPED"
    }
    finalizedBy jacocoTestReport // Generate report after tests run
}


// JaCoCo configuration
jacoco {
    toolVersion = "0.8.11" // Use the latest version of JaCoCo
}

jacocoTestReport {
    dependsOn test // Tests are required to run before generating the report
    reports {
        xml.required = true
        csv.required = false
        html.required = true
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco')
    }
}
//
//jacocoTestCoverageVerification {
//    violationRules {
//        rule {
//            limit {
//                minimum = 0.5 // Minimum code coverage of 50%
//            }
//        }
//    }
//}
//
