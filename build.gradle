plugins {
    id 'java'
    id 'application'
    id 'groovy'
    id 'jacoco' // For code coverage
    id 'org.graalvm.buildtools.native' version '0.10.6'
}

group = 'com.brunorozendo'
version = '0.7.1' // Incremented version for dependency fix


java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
}

dependencies {
    // The core MCP SDK for Java
    implementation 'io.modelcontextprotocol.sdk:mcp:0.10.0'

    // A library for generating text diffs, using the correct Maven coordinates
    implementation 'io.github.java-diff-utils:java-diff-utils:4.12'

    // Jackson for object mapping, provided by the MCP SDK but good to be aware of
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.19.1'



    // Spock and Groovy for testing
    testImplementation platform('org.spockframework:spock-bom:2.4-M6-groovy-4.0')
    testImplementation 'org.spockframework:spock-core'

    // Spock reports
    testImplementation "com.athaydes:spock-reports:2.5.1-groovy-4.0"
}

application {
    mainClass = 'com.brunorozendo.mcp.filesystem.FilesystemServer'
}


// Create a fat jar for easier distribution
jar {
    manifest {
        attributes(
                'Main-Class': 'com.brunorozendo.mcp.filesystem.FilesystemServer'
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    // Exclude signature files to avoid security exceptions
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
}


test{
    useJUnitPlatform()
    testLogging {
        //events "FAILED","PASSED","SKIPPED","STANDARD_ERROR","STANDARD_OUT","STARTED"
        events "FAILED","PASSED","SKIPPED"
    }
    finalizedBy jacocoTestReport // Generate report after tests run
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    // Add any exclusions here if needed
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.80 // 80% coverage required
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification


graalvmNative {
    toolchainDetection = true
    binaries {
        main {
            imageName = 'mcp-server-filesystem'
            mainClass = application.mainClass.get()
            buildArgs.add('--no-fallback')
            buildArgs.add('-H:+ReportExceptionStackTraces')
            buildArgs.add('--initialize-at-build-time=org.slf4j')
            buildArgs.add('--initialize-at-build-time=ch.qos.logback')
            buildArgs.add('--enable-https')
            buildArgs.add('--enable-all-security-services')
            // Configuration files will be picked up automatically from META-INF/native-image
        }
    }
}


tasks.named('wrapper') {
    gradleVersion = '8.14.2'
    distributionType = Wrapper.DistributionType.ALL
}
